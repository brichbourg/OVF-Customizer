import xmltodict
import json
import sys
import os.path
from subprocess import call

def mtwasetup():
	#This will be used to get the name of the host so we grab the correct data from the ovfEnv XML
	if os.path.exists("/etc/hostname"):
		hostname = open("/etc/hostname").read()
	else:
		print 'File ', os.path.realpath("/etc/hostname"), 'does not exist.  Please try again'
		# sys.exit(1) #uncomment this and delete the next line when I run on a linux environment
		# hostname = 'web01'

	#db
	print 'The hostname is %r'%hostname #db

	#This is to test the call function to generate the OVF environment variables from VMtools.  I need to figure out how to use this to run the VMWare Tools CMD to generate the OVF variable data.
	# call(["ls", "-l"])

	ovfdata = open("ovfEnv.xml").read()

	#This opens the XML file generated by the call function and will grabs the values set by the OVF keys entered by the user
	if os.path.exists("ovfEnv.xml"):
		print 'ovfEnv.xml IF statement' #db
		ovfdict = xmltodict.parse(ovfdata)
		vAppData = ovfdict['Environment']['PropertySection']['Property']

		ip_address_key = hostname + '_ip_address'
		print '%r :DEBUG- ip_address_key' %ip_address_key #db
		netmask_address_key = hostname + '_netmask'
		print netmask_address_key, 'DEBUG: netmask_address_key' #db
		gateway_address_key = hostname + '_gateway'
		print gateway_address_key, 'DEBUG: gateway_address_key' #db
		use_app_vip_answer_key = 'use_app_vip_boolean'
		app_vip_ip_address_key = 'App_VIP_IP_Address'
		app01_ip_address_key = 'app01_ip_address'
		db01_ip_address_key = 'db01_ip_address'

		#Grab the variables set by the user via the OVA import process that are needed.
		for each in vAppData:
			if each ['@oe:key'] == ip_address_key:
				ip_address = each['@oe:value']
			if each ['@oe:key'] == netmask_address_key:
				netmask_address = each['@oe:value']
			if each ['@oe:key'] == gateway_address_key:
				gateway_address = each['@oe:value']
			if each ['@oe:key'] == use_app_vip_answer_key:
				use_app_vip_answer = each['@oe:value']
			if each ['@oe:key'] == app_vip_ip_address_key:
				app_vip_ip_address = each['@oe:value']
			if each ['@oe:key'] == app01_ip_address_key:
				app01_ip_address = each['@oe:value']
			if each ['@oe:key'] == db01_ip_address_key:
				db01_ip_address = each['@oe:value']


		#Now we need to set the network information in /etc/network/interfaces
		network_interface_file ='''

#####
## This file is autogenerated by mtwa-ova-setup.py script for the MTWA OVA deployment.
######

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug eth0
iface eth0 inet static
 address %s
 netmask %s
 gateway %s

		'''	% (ip_address, netmask_address, gateway_address)

		print network_interface_file #DB

		file = open('interfaces', 'w') #Replace with /etc/network/interfaces once on linux
		file.write(network_interface_file)
		file.close()


		#Now we need to modify the /etc/hosts file to make sure the MTWA application will work with the custom IP addresses provided from the OVF environment

		#This first section figures out if we are running on 
		if hostname == 'web01' or hostname == 'web02':
			backend_host = 'appserver-appdemo'
		elif hostname == 'app01' or hostname == 'app02':
			backend_host = 'dbserver-appdemo'
		else:
			backend_host = None

		#Now we figure out if the user selected via the OVF parameters to use an Application server VIP or just a standalone host (app01)
		if use_app_vip_answer == 'True' and hostname == 'web01' or hostname == 'web02':
			backend_ip_address = app_vip_ip_address
		elif use_app_vip_answer == "False" and hostname == 'web01' or hostname == 'web02':
			backend_ip_address = app01_ip_address
		elif hostname == 'app01' or hostname == 'app02':
			backend_ip_address = db01_ip_address
		else:
			backend_ip_address = None

		#We only care about modifing the /etc/hosts file for web and app servers, if it's the DB server, skip.
		if backend_ip_address != None:
			file = open('/etc/hosts', 'w') #Replace with /etc/hosts once on linux
			etc_hosts_file = '''
#####
## This file is autogenerated by mtwa-ova-setup.py script for the MTWA OVA deployment.
######
127.0.0.1	localhost
255.255.255.255	broadcasthost
%s    %s   


			''' % (backend_ip_address, backend_host)
			file.write(etc_hosts_file)
			file.close()


		#Once the script has completed, we will write a file to the system so this doesn't run at each startup.  We only want it to run once on the first startup.
		file = open('setupcomplete','w')
		file.write('This was generated by mtwa-ova-setup.py to indicated the OVF environment setup was complete.  Delete this file and reboot to have the script run at the next startup')
		file.close()


	else:
		print 'File ', os.path.realpath("ovfEnv.xml"), 'does not exist.  Please try again'
		sys.exit(1)


def main():
	#This will check and see if the script has run before, and if so it will terminate the scripts because the intention is this runs @ system startup to automatically configure the IP address information from the OVF environment.
	if os.path.exists("setupcomplete"):
		sys.exit(1)
	else:
		mtwasetup()


if __name__ == "__main__":
	main()

